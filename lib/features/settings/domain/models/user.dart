import 'package:json_annotation/json_annotation.dart';
import '../../../../core/utils/database_date_utils.dart';
import '../../../../shared/constants/database_constants.dart';

part 'user.g.dart';

/// User domain model
///
/// Represents a user profile with authentication, preferences,
/// and sleep-related settings.
///
/// Supports future multi-user capability and authentication.
@JsonSerializable()
class User {
  final String id;
  final String email;
  final String? passwordHash;
  final String firstName;
  final String lastName;
  final DateTime birthDate;
  final String timezone;
  final int? targetSleepDuration; // in minutes
  final String? targetBedTime; // HH:mm format
  final String? targetWakeTime; // HH:mm format
  final bool hasSleepDisorder;
  final String? sleepDisorderType;
  final bool takesSleepMedication;
  final String preferredUnitSystem; // 'metric' or 'imperial'
  final String language; // 'en', 'de', etc.
  final DateTime createdAt;
  final DateTime updatedAt;

  const User({
    required this.id,
    required this.email,
    this.passwordHash,
    required this.firstName,
    required this.lastName,
    required this.birthDate,
    required this.timezone,
    this.targetSleepDuration,
    this.targetBedTime,
    this.targetWakeTime,
    this.hasSleepDisorder = false,
    this.sleepDisorderType,
    this.takesSleepMedication = false,
    this.preferredUnitSystem = 'metric',
    this.language = 'en',
    required this.createdAt,
    required this.updatedAt,
  });

  // JSON serialization (auto-generated by build_runner)
  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);

  Map<String, dynamic> toJson() => _$UserToJson(this);

  // Database conversion (manual - handles DateTime and boolean conversion)
  /// Creates User from database row
  ///
  /// Handles SQLite-specific conversions:
  /// - INTEGER (0/1) → bool
  /// - TEXT (ISO 8601) → DateTime
  /// - Uses DatabaseConstants for column names
  factory User.fromDatabase(Map<String, dynamic> map) {
    return User(
      id: map[USERS_ID] as String,
      email: map[USERS_EMAIL] as String,
      passwordHash: map[USERS_PASSWORD_HASH] as String?,
      firstName: map[USERS_FIRST_NAME] as String,
      lastName: map[USERS_LAST_NAME] as String,
      birthDate: DatabaseDateUtils.fromString(map[USERS_BIRTH_DATE] as String),
      timezone: map[USERS_TIMEZONE] as String,
      targetSleepDuration: map[USERS_TARGET_SLEEP_DURATION] as int?,
      targetBedTime: map[USERS_TARGET_BED_TIME] as String?,
      targetWakeTime: map[USERS_TARGET_WAKE_TIME] as String?,
      hasSleepDisorder: (map[USERS_HAS_SLEEP_DISORDER] as int) == 1,
      sleepDisorderType: map[USERS_SLEEP_DISORDER_TYPE] as String?,
      takesSleepMedication: (map[USERS_TAKES_SLEEP_MEDICATION] as int) == 1,
      preferredUnitSystem: map[USERS_PREFERRED_UNIT_SYSTEM] as String,
      language: map[USERS_LANGUAGE] as String,
      createdAt: DatabaseDateUtils.fromString(map[USERS_CREATED_AT] as String),
      updatedAt: DatabaseDateUtils.fromString(map[USERS_UPDATED_AT] as String),
    );
  }

  /// Converts User to database row map
  ///
  /// Handles Dart → SQLite conversions:
  /// - bool → INTEGER (0/1)
  /// - DateTime → TEXT (ISO 8601)
  /// - Uses DatabaseConstants for column names
  Map<String, dynamic> toDatabase() {
    return {
      USERS_ID: id,
      USERS_EMAIL: email,
      USERS_PASSWORD_HASH: passwordHash,
      USERS_FIRST_NAME: firstName,
      USERS_LAST_NAME: lastName,
      USERS_BIRTH_DATE: DatabaseDateUtils.toDateString(birthDate),
      USERS_TIMEZONE: timezone,
      USERS_TARGET_SLEEP_DURATION: targetSleepDuration,
      USERS_TARGET_BED_TIME: targetBedTime,
      USERS_TARGET_WAKE_TIME: targetWakeTime,
      USERS_HAS_SLEEP_DISORDER: hasSleepDisorder ? 1 : 0,
      USERS_SLEEP_DISORDER_TYPE: sleepDisorderType,
      USERS_TAKES_SLEEP_MEDICATION: takesSleepMedication ? 1 : 0,
      USERS_PREFERRED_UNIT_SYSTEM: preferredUnitSystem,
      USERS_LANGUAGE: language,
      USERS_CREATED_AT: DatabaseDateUtils.toTimestamp(createdAt),
      USERS_UPDATED_AT: DatabaseDateUtils.toTimestamp(updatedAt),
      USERS_IS_DELETED: 0, // Always 0 for active users
    };
  }

  // Immutable update helper
  /// Creates a copy of this User with specified fields replaced
  ///
  /// Useful for updating user preferences, profile information, etc.
  User copyWith({
    String? id,
    String? email,
    String? passwordHash,
    String? firstName,
    String? lastName,
    DateTime? birthDate,
    String? timezone,
    int? targetSleepDuration,
    String? targetBedTime,
    String? targetWakeTime,
    bool? hasSleepDisorder,
    String? sleepDisorderType,
    bool? takesSleepMedication,
    String? preferredUnitSystem,
    String? language,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return User(
      id: id ?? this.id,
      email: email ?? this.email,
      passwordHash: passwordHash ?? this.passwordHash,
      firstName: firstName ?? this.firstName,
      lastName: lastName ?? this.lastName,
      birthDate: birthDate ?? this.birthDate,
      timezone: timezone ?? this.timezone,
      targetSleepDuration: targetSleepDuration ?? this.targetSleepDuration,
      targetBedTime: targetBedTime ?? this.targetBedTime,
      targetWakeTime: targetWakeTime ?? this.targetWakeTime,
      hasSleepDisorder: hasSleepDisorder ?? this.hasSleepDisorder,
      sleepDisorderType: sleepDisorderType ?? this.sleepDisorderType,
      takesSleepMedication: takesSleepMedication ?? this.takesSleepMedication,
      preferredUnitSystem: preferredUnitSystem ?? this.preferredUnitSystem,
      language: language ?? this.language,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  // Getters
  /// Returns full name by combining first and last name
  String get fullName => '$firstName $lastName';

  /// Calculates age from birth date
  ///
  /// Takes into account whether the user has had their birthday this year.
  int get age {
    final now = DateTime.now();
    int age = now.year - birthDate.year;

    // Adjust if birthday hasn't occurred yet this year
    if (now.month < birthDate.month ||
        (now.month == birthDate.month && now.day < birthDate.day)) {
      age--;
    }

    return age;
  }
}