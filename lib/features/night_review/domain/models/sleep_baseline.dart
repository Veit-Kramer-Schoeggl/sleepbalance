import 'package:json_annotation/json_annotation.dart';
import '../../../../core/utils/database_date_utils.dart';
import '../../../../shared/constants/database_constants.dart';

part 'sleep_baseline.g.dart';

/// Sleep Baseline domain model
///
/// Represents computed personal averages for sleep metrics.
/// Used to compare individual nights against user's typical sleep patterns.
///
/// Baseline types:
/// - '7_day': Rolling 7-day average
/// - '30_day': Rolling 30-day average
/// - 'all_time': Overall lifetime average
///
/// Example metrics:
/// - 'avg_deep_sleep': Average deep sleep duration
/// - 'avg_total_sleep': Average total sleep time
/// - 'avg_sleep_efficiency': Average sleep efficiency percentage
@JsonSerializable()
class SleepBaseline {
  final String id;
  final String userId;
  final String baselineType;
  final String metricName;
  final double metricValue;
  final DateTime dataRangeStart;
  final DateTime dataRangeEnd;
  final DateTime computedAt;

  const SleepBaseline({
    required this.id,
    required this.userId,
    required this.baselineType,
    required this.metricName,
    required this.metricValue,
    required this.dataRangeStart,
    required this.dataRangeEnd,
    required this.computedAt,
  });

  // JSON serialization (auto-generated by build_runner)
  factory SleepBaseline.fromJson(Map<String, dynamic> json) =>
      _$SleepBaselineFromJson(json);

  Map<String, dynamic> toJson() => _$SleepBaselineToJson(this);

  // Database conversion (manual - handles DateTime conversion)
  /// Creates SleepBaseline from database row
  ///
  /// Handles SQLite-specific conversions:
  /// - TEXT (ISO 8601) → DateTime
  factory SleepBaseline.fromDatabase(Map<String, dynamic> map) {
    return SleepBaseline(
      id: map[USER_SLEEP_BASELINES_ID] as String,
      userId: map[USER_SLEEP_BASELINES_USER_ID] as String,
      baselineType: map[USER_SLEEP_BASELINES_BASELINE_TYPE] as String,
      metricName: map[USER_SLEEP_BASELINES_METRIC_NAME] as String,
      metricValue: map[USER_SLEEP_BASELINES_METRIC_VALUE] as double,
      dataRangeStart: DatabaseDateUtils.fromString(
          map[USER_SLEEP_BASELINES_DATA_RANGE_START] as String),
      dataRangeEnd: DatabaseDateUtils.fromString(
          map[USER_SLEEP_BASELINES_DATA_RANGE_END] as String),
      computedAt: DatabaseDateUtils.fromString(
          map[USER_SLEEP_BASELINES_COMPUTED_AT] as String),
    );
  }

  /// Converts SleepBaseline to database row map
  ///
  /// Handles Dart → SQLite conversions:
  /// - DateTime → TEXT (ISO 8601)
  Map<String, dynamic> toDatabase() {
    return {
      USER_SLEEP_BASELINES_ID: id,
      USER_SLEEP_BASELINES_USER_ID: userId,
      USER_SLEEP_BASELINES_BASELINE_TYPE: baselineType,
      USER_SLEEP_BASELINES_METRIC_NAME: metricName,
      USER_SLEEP_BASELINES_METRIC_VALUE: metricValue,
      USER_SLEEP_BASELINES_DATA_RANGE_START:
          DatabaseDateUtils.toDateString(dataRangeStart),
      USER_SLEEP_BASELINES_DATA_RANGE_END:
          DatabaseDateUtils.toDateString(dataRangeEnd),
      USER_SLEEP_BASELINES_COMPUTED_AT:
          DatabaseDateUtils.toTimestamp(computedAt),
    };
  }

  // Immutable update helper
  /// Creates a copy of this SleepBaseline with specified fields replaced
  ///
  /// Useful for updating computed values when recalculating baselines
  SleepBaseline copyWith({
    String? id,
    String? userId,
    String? baselineType,
    String? metricName,
    double? metricValue,
    DateTime? dataRangeStart,
    DateTime? dataRangeEnd,
    DateTime? computedAt,
  }) {
    return SleepBaseline(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      baselineType: baselineType ?? this.baselineType,
      metricName: metricName ?? this.metricName,
      metricValue: metricValue ?? this.metricValue,
      dataRangeStart: dataRangeStart ?? this.dataRangeStart,
      dataRangeEnd: dataRangeEnd ?? this.dataRangeEnd,
      computedAt: computedAt ?? this.computedAt,
    );
  }
}