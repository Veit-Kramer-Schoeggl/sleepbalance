import 'package:json_annotation/json_annotation.dart';
import '../../../../core/utils/database_date_utils.dart';
import '../../../../shared/constants/database_constants.dart';

part 'sleep_record.g.dart';

/// Sleep Record domain model
///
/// Represents nightly sleep data from wearables (aggregated metrics).
/// Contains objective sleep metrics (phases, heart rate, HRV, breathing)
/// and subjective quality rating from the user.
///
/// Data source hierarchy: Wearables (Apple Health/Google Fit) → SleepRecord → Database
@JsonSerializable()
class SleepRecord {
  final String id;
  final String userId;
  final DateTime sleepDate;
  final DateTime? bedTime;
  final DateTime? sleepStartTime;
  final DateTime? sleepEndTime;
  final DateTime? wakeTime;
  final int? totalSleepTime;
  final int? deepSleepDuration;
  final int? remSleepDuration;
  final int? lightSleepDuration;
  final int? awakeDuration;
  final double? avgHeartRate;
  final double? minHeartRate;
  final double? maxHeartRate;
  final double? avgHrv;
  final double? avgHeartRateVariability;
  final double? avgBreathingRate;
  final String? qualityRating;
  final String? qualityNotes;
  final String dataSource;
  final DateTime createdAt;
  final DateTime updatedAt;

  const SleepRecord({
    required this.id,
    required this.userId,
    required this.sleepDate,
    this.bedTime,
    this.sleepStartTime,
    this.sleepEndTime,
    this.wakeTime,
    this.totalSleepTime,
    this.deepSleepDuration,
    this.remSleepDuration,
    this.lightSleepDuration,
    this.awakeDuration,
    this.avgHeartRate,
    this.minHeartRate,
    this.maxHeartRate,
    this.avgHrv,
    this.avgHeartRateVariability,
    this.avgBreathingRate,
    this.qualityRating,
    this.qualityNotes,
    required this.dataSource,
    required this.createdAt,
    required this.updatedAt,
  });

  // JSON serialization (auto-generated by build_runner)
  factory SleepRecord.fromJson(Map<String, dynamic> json) =>
      _$SleepRecordFromJson(json);

  Map<String, dynamic> toJson() => _$SleepRecordToJson(this);

  // Database conversion (manual - handles DateTime and nullable field conversions)
  /// Creates SleepRecord from database row
  ///
  /// Handles SQLite-specific conversions:
  /// - TEXT (ISO 8601) → DateTime
  /// - NULL handling for nullable fields
  factory SleepRecord.fromDatabase(Map<String, dynamic> map) {
    return SleepRecord(
      id: map[SLEEP_RECORDS_ID] as String,
      userId: map[SLEEP_RECORDS_USER_ID] as String,
      sleepDate: DatabaseDateUtils.fromString(
          map[SLEEP_RECORDS_SLEEP_DATE] as String),
      bedTime: map[SLEEP_RECORDS_BED_TIME] != null
          ? DatabaseDateUtils.fromString(map[SLEEP_RECORDS_BED_TIME] as String)
          : null,
      sleepStartTime: map[SLEEP_RECORDS_SLEEP_START_TIME] != null
          ? DatabaseDateUtils.fromString(
              map[SLEEP_RECORDS_SLEEP_START_TIME] as String)
          : null,
      sleepEndTime: map[SLEEP_RECORDS_SLEEP_END_TIME] != null
          ? DatabaseDateUtils.fromString(
              map[SLEEP_RECORDS_SLEEP_END_TIME] as String)
          : null,
      wakeTime: map[SLEEP_RECORDS_WAKE_TIME] != null
          ? DatabaseDateUtils.fromString(
              map[SLEEP_RECORDS_WAKE_TIME] as String)
          : null,
      totalSleepTime: map[SLEEP_RECORDS_TOTAL_SLEEP_TIME] as int?,
      deepSleepDuration: map[SLEEP_RECORDS_DEEP_SLEEP_DURATION] as int?,
      remSleepDuration: map[SLEEP_RECORDS_REM_SLEEP_DURATION] as int?,
      lightSleepDuration: map[SLEEP_RECORDS_LIGHT_SLEEP_DURATION] as int?,
      awakeDuration: map[SLEEP_RECORDS_AWAKE_DURATION] as int?,
      avgHeartRate: map[SLEEP_RECORDS_AVG_HEART_RATE] as double?,
      minHeartRate: map[SLEEP_RECORDS_MIN_HEART_RATE] as double?,
      maxHeartRate: map[SLEEP_RECORDS_MAX_HEART_RATE] as double?,
      avgHrv: map[SLEEP_RECORDS_AVG_HRV] as double?,
      avgHeartRateVariability: map[SLEEP_RECORDS_AVG_HEART_RATE_VARIABILITY] as double?,
      avgBreathingRate: map[SLEEP_RECORDS_AVG_BREATHING_RATE] as double?,
      qualityRating: map[SLEEP_RECORDS_QUALITY_RATING] as String?,
      qualityNotes: map[SLEEP_RECORDS_QUALITY_NOTES] as String?,
      dataSource: map[SLEEP_RECORDS_DATA_SOURCE] as String,
      createdAt: DatabaseDateUtils.fromString(
          map[SLEEP_RECORDS_CREATED_AT] as String),
      updatedAt: DatabaseDateUtils.fromString(
          map[SLEEP_RECORDS_UPDATED_AT] as String),
    );
  }

  /// Converts SleepRecord to database row map
  ///
  /// Handles Dart → SQLite conversions:
  /// - DateTime → TEXT (ISO 8601)
  /// - Preserves null values for nullable fields
  Map<String, dynamic> toDatabase() {
    return {
      SLEEP_RECORDS_ID: id,
      SLEEP_RECORDS_USER_ID: userId,
      SLEEP_RECORDS_SLEEP_DATE: DatabaseDateUtils.toDateString(sleepDate),
      SLEEP_RECORDS_BED_TIME:
          bedTime != null ? DatabaseDateUtils.toTimestamp(bedTime!) : null,
      SLEEP_RECORDS_SLEEP_START_TIME: sleepStartTime != null
          ? DatabaseDateUtils.toTimestamp(sleepStartTime!)
          : null,
      SLEEP_RECORDS_SLEEP_END_TIME: sleepEndTime != null
          ? DatabaseDateUtils.toTimestamp(sleepEndTime!)
          : null,
      SLEEP_RECORDS_WAKE_TIME:
          wakeTime != null ? DatabaseDateUtils.toTimestamp(wakeTime!) : null,
      SLEEP_RECORDS_TOTAL_SLEEP_TIME: totalSleepTime,
      SLEEP_RECORDS_DEEP_SLEEP_DURATION: deepSleepDuration,
      SLEEP_RECORDS_REM_SLEEP_DURATION: remSleepDuration,
      SLEEP_RECORDS_LIGHT_SLEEP_DURATION: lightSleepDuration,
      SLEEP_RECORDS_AWAKE_DURATION: awakeDuration,
      SLEEP_RECORDS_AVG_HEART_RATE: avgHeartRate,
      SLEEP_RECORDS_MIN_HEART_RATE: minHeartRate,
      SLEEP_RECORDS_MAX_HEART_RATE: maxHeartRate,
      SLEEP_RECORDS_AVG_HRV: avgHrv,
      SLEEP_RECORDS_AVG_HEART_RATE_VARIABILITY: avgHeartRateVariability,
      SLEEP_RECORDS_AVG_BREATHING_RATE: avgBreathingRate,
      SLEEP_RECORDS_QUALITY_RATING: qualityRating,
      SLEEP_RECORDS_QUALITY_NOTES: qualityNotes,
      SLEEP_RECORDS_DATA_SOURCE: dataSource,
      SLEEP_RECORDS_CREATED_AT: DatabaseDateUtils.toTimestamp(createdAt),
      SLEEP_RECORDS_UPDATED_AT: DatabaseDateUtils.toTimestamp(updatedAt),
    };
  }

  // Immutable update helper
  /// Creates a copy of this SleepRecord with specified fields replaced
  ///
  /// Useful for updating quality ratings, adding notes, etc.
  SleepRecord copyWith({
    String? id,
    String? userId,
    DateTime? sleepDate,
    DateTime? bedTime,
    DateTime? sleepStartTime,
    DateTime? sleepEndTime,
    DateTime? wakeTime,
    int? totalSleepTime,
    int? deepSleepDuration,
    int? remSleepDuration,
    int? lightSleepDuration,
    int? awakeDuration,
    double? avgHeartRate,
    double? minHeartRate,
    double? maxHeartRate,
    double? avgHrv,
    double? avgHeartRateVariability,
    double? avgBreathingRate,
    String? qualityRating,
    String? qualityNotes,
    String? dataSource,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return SleepRecord(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      sleepDate: sleepDate ?? this.sleepDate,
      bedTime: bedTime ?? this.bedTime,
      sleepStartTime: sleepStartTime ?? this.sleepStartTime,
      sleepEndTime: sleepEndTime ?? this.sleepEndTime,
      wakeTime: wakeTime ?? this.wakeTime,
      totalSleepTime: totalSleepTime ?? this.totalSleepTime,
      deepSleepDuration: deepSleepDuration ?? this.deepSleepDuration,
      remSleepDuration: remSleepDuration ?? this.remSleepDuration,
      lightSleepDuration: lightSleepDuration ?? this.lightSleepDuration,
      awakeDuration: awakeDuration ?? this.awakeDuration,
      avgHeartRate: avgHeartRate ?? this.avgHeartRate,
      minHeartRate: minHeartRate ?? this.minHeartRate,
      maxHeartRate: maxHeartRate ?? this.maxHeartRate,
      avgHrv: avgHrv ?? this.avgHrv,
      avgHeartRateVariability: avgHeartRateVariability ?? this.avgHeartRateVariability,
      avgBreathingRate: avgBreathingRate ?? this.avgBreathingRate,
      qualityRating: qualityRating ?? this.qualityRating,
      qualityNotes: qualityNotes ?? this.qualityNotes,
      dataSource: dataSource ?? this.dataSource,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  // Calculated properties
  /// Calculates sleep efficiency as percentage
  ///
  /// Formula: (totalSleepTime / timeInBed) * 100
  /// Returns null if required data is unavailable
  ///
  /// Example: 420 minutes sleep / 480 minutes in bed = 87.5% efficiency
  int? get sleepEfficiency {
    if (totalSleepTime == null || bedTime == null || wakeTime == null) {
      return null;
    }
    final timeInBedDuration = timeInBed;
    if (timeInBedDuration == null || timeInBedDuration.inMinutes == 0) {
      return null;
    }
    return ((totalSleepTime! / timeInBedDuration.inMinutes) * 100).round();
  }

  /// Calculates total time in bed
  ///
  /// Duration from bedTime to wakeTime
  /// Returns null if bedTime or wakeTime is unavailable
  Duration? get timeInBed {
    if (bedTime == null || wakeTime == null) {
      return null;
    }
    return wakeTime!.difference(bedTime!);
  }
}