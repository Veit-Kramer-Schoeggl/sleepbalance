import 'package:flutter/material.dart';
import 'package:json_annotation/json_annotation.dart';
import '../../../../core/utils/database_date_utils.dart';

part 'daily_action.g.dart';

/// Daily Action domain model
///
/// Represents a single action item (task/habit) for a specific date.
/// Used in Action Center for tracking daily activities and habits.
///
/// Example: "Drink a glass of water", "Take 5 deep breaths"
@JsonSerializable()
class DailyAction {
  final String id;
  final String userId;
  final String title;
  final String iconName;
  final bool isCompleted;
  final DateTime actionDate;
  final DateTime createdAt;
  final DateTime? completedAt;

  const DailyAction({
    required this.id,
    required this.userId,
    required this.title,
    required this.iconName,
    required this.isCompleted,
    required this.actionDate,
    required this.createdAt,
    this.completedAt,
  });

  // JSON serialization (auto-generated by build_runner)
  factory DailyAction.fromJson(Map<String, dynamic> json) =>
      _$DailyActionFromJson(json);

  Map<String, dynamic> toJson() => _$DailyActionToJson(this);

  // Database conversion (manual - handles DateTime and boolean conversion)
  /// Creates DailyAction from database row
  ///
  /// Handles SQLite-specific conversions:
  /// - INTEGER (0/1) → bool
  /// - TEXT (ISO 8601) → DateTime
  factory DailyAction.fromDatabase(Map<String, dynamic> map) {
    return DailyAction(
      id: map['id'] as String,
      userId: map['user_id'] as String,
      title: map['title'] as String,
      iconName: map['icon_name'] as String,
      isCompleted: (map['is_completed'] as int) == 1,
      actionDate: DatabaseDateUtils.fromString(map['action_date'] as String),
      createdAt: DatabaseDateUtils.fromString(map['created_at'] as String),
      completedAt: map['completed_at'] != null
          ? DatabaseDateUtils.fromString(map['completed_at'] as String)
          : null,
    );
  }

  /// Converts DailyAction to database row map
  ///
  /// Handles Dart → SQLite conversions:
  /// - bool → INTEGER (0/1)
  /// - DateTime → TEXT (ISO 8601)
  Map<String, dynamic> toDatabase() {
    return {
      'id': id,
      'user_id': userId,
      'title': title,
      'icon_name': iconName,
      'is_completed': isCompleted ? 1 : 0,
      'action_date': DatabaseDateUtils.toDateString(actionDate),
      'created_at': DatabaseDateUtils.toTimestamp(createdAt),
      'completed_at': completedAt != null
          ? DatabaseDateUtils.toTimestamp(completedAt!)
          : null,
    };
  }

  // Immutable update helper
  /// Creates a copy of this DailyAction with specified fields replaced
  ///
  /// Useful for toggling completion status, updating timestamps, etc.
  DailyAction copyWith({
    String? id,
    String? userId,
    String? title,
    String? iconName,
    bool? isCompleted,
    DateTime? actionDate,
    DateTime? createdAt,
    DateTime? completedAt,
  }) {
    return DailyAction(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      title: title ?? this.title,
      iconName: iconName ?? this.iconName,
      isCompleted: isCompleted ?? this.isCompleted,
      actionDate: actionDate ?? this.actionDate,
      createdAt: createdAt ?? this.createdAt,
      completedAt: completedAt ?? this.completedAt,
    );
  }

  // Helper to convert iconName string to Flutter IconData
  /// Converts iconName string to Material Icon
  ///
  /// Maps action types to appropriate icons:
  /// - 'local_drink' → water glass icon
  /// - 'air' → breathing icon
  /// - 'accessibility_new' → stretching icon
  /// - default → check circle icon
  IconData get icon {
    switch (iconName) {
      case 'local_drink':
        return Icons.local_drink;
      case 'air':
        return Icons.air;
      case 'accessibility_new':
        return Icons.accessibility_new;
      default:
        return Icons.check_circle;
    }
  }
}
